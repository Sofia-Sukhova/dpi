===============================================================================
Module : test
===============================================================================
SCORE  LINE   COND   BRANCH 
 54.82  69.64 --      40.00 

Source File(s) : 

/export/data/verif/bochkareva_s/dpi/dpi/build/../src/test.sv

Module self-instances :

SCORE  LINE   COND   BRANCH NAME 
 54.82  69.64 --      40.00 test 



-------------------------------------------------------------------------------
Line Coverage for Module : test

             Line No.   Total   Covered  Percent
TOTAL                       56       39    69.64
ROUTINE             6        1        0     0.00
INITIAL            35        4        4   100.00
ROUTINE            41        5        5   100.00
ROUTINE            49       14       12    85.71
ALWAYS             78        6        4    66.67
INITIAL           131       26       14    53.85

5                       
6          0/1     ==>  import "DPI-C" function int grey_count( input int tick, input int size);
7                       
8                       reg clk;
9                       reg rst;
10                      reg [SIZE - 1:0] res;
11                      
12                      string filename;
13                      string line;
14                      int file;
15                      
16                      int real_res;
17                      int arg0;
18                      int arg1;
19                      int tick;
20                      int rand_num;
21                      reg dut_running;
22                      
23                      reg inc;
24                      
25                      Gray_counter #( .SIZE(SIZE)) counter (
26                        .clk (clk),
27                        .rst (rst),
28                        .inc (inc),
29                        .gray (res)
30                      );
31                      
32                      //make clk
33                      initial
34                      begin
35         1/1              clk = 0;
36         3/3              forever #1 clk = ~clk;
37                      end
38                      
39                      //task reset
40                      task reset();
41         2/2              rst = 0; @(negedge clk)
42         2/2              rst = 1; @(negedge clk)
43         1/1              rst = 0;
44                      endtask
45                      
46                      
47                      //test function
48                      task test_input();
49         1/1              reset();
50         1/1              dut_running = 1;
51         1/1              $display("Testing counter from %d on %d ticks", arg0, arg1);
52                      
53         2/2              for ( tick = 0; tick < arg1 + arg0; tick ++) @(posedge clk)
54                          begin
55         1/1          	inc = 1;
56                              //this pause need for reaching internal arg0 state in actual GreyCounter
57         1/1                  if ( tick >= arg0)
58                              begin
59         1/1                      real_res = grey_count( tick, SIZE);
60         1/1                      if ( res != real_res)
61                                  begin
62         0/1     ==>                  $display(" %d : %d != %d", tick, real_res, res);
63         0/1     ==>                  $fatal( 1, "Test failed!");
64                                  end
                        MISSING_ELSE
65                              end
                        MISSING_ELSE
66                          end
67         1/1              inc = 0;
68         1/1              dut_running = 0;
69         1/1              $display(" Test passed!");
70                      endtask
71                      
72                      //timeout
73                      int timer;
74                      parameter TIMEOUT=1000;
75                      
76                      always @(posedge clk)
77                      begin
78         1/1              if (dut_running)
79         1/1                  timer <= timer + 1;
80                          else
81         1/1                  timer <= 0;
82                      
83         1/1              if (timer == TIMEOUT + arg1 + arg0)
84                          begin
85         0/1     ==>          $display("Timeout! DUT has been running too long.");
86         0/1     ==>          $finish;
87                          end
                        MISSING_ELSE
88                      end
89                      
90                      //there is no boundaries except size of Counter
91                      class RandState;
92                          rand bit [ SIZE-1:0] size;
93                      
94                          function int result();
95                      	return size;
96                          endfunction
97                      endclass
98                      
99                      typedef enum
100                     {
101                         NORM,
102                         OVER
103                     } randTime;
104                     
105                     class RandTime;
106                         rand bit [ SIZE - 1:0] norm_time;
107                         rand bit [ 1:0]	   wrap;
108                         
109                         rand randTime	   t_type;
110                         constraint t_type_range {
111                     	t_type dist {
112                     	    NORM := 10,
113                     	    OVER := 5
114                     	};
115                         }
116                     
117                         constraint on_wrap {
118                             solve t_type before wrap;
119                          	t_type == NORM -> wrap == 0;
120                     	t_type == OVER -> wrap != 0;   
121                         }
122                     
123                         function int result();
124                     	return { wrap, norm_time};
125                         endfunction
126                     endclass 
127                     
128                     //parsing input elements
129                     initial
130                     begin
131        1/1              if ($value$plusargs("arg0=%d", arg0))
132                         begin
133        0/1     ==>          if ($value$plusargs("arg1=%d", arg1))
134                             begin
135        0/1     ==>              test_input();
136                             end
137                             else
138                             begin
139        0/1     ==>              $display("Arg1 missed!");
140                             end
141                         end
142        1/1              else if ($value$plusargs("file=%s", filename))
143                         begin
144        0/1     ==>          file = $fopen(filename, "r");
145        0/1     ==>          while ($fgets(line, file))
146                             begin
147        0/1     ==>              $sscanf(line, "%d %d", arg0, arg1);
148        0/1     ==>              test_input();
149                             end
150                         end
151        1/1              else if ($value$plusargs("random_mode=%d", rand_num))
152                         begin
153        1/1                  if ( $test$plusargs("constraint"))
154                     	begin
155                     	    RandState r_state = new;
156                     	    RandTime  r_time  = new;
157        1/1          	    for ( int i = 0; i < rand_num; )
158                     	    begin
159                     		reg ok;
160        1/1          		ok = r_state.randomize();
161        1/1          		if ( ok)
162                     		begin
163        1/1          		    arg0 = r_state.result();
164                     		end
                   ==>  MISSING_ELSE
165        1/1          		ok &= r_time.randomize();
166        1/1          		if ( ok)
167                     		begin
168        1/1          		    arg1 = r_time.result();
169        1/1          		    i ++;
170        1/1          		    test_input();
171                     		end
                   ==>  MISSING_ELSE
172                     	    end
173                     	end
174                     	else
175                     	begin
176        0/1     ==>  	    for (int i = 0; i < rand_num; i++)
177                                 begin
178        0/1     ==>                  arg0 = $urandom();
179        0/1     ==>                  arg1 = $urandom();
180        0/1     ==>                  test_input();
181                                 end
182                     	end
183                         end
184                         else
185                         begin
186        0/1     ==>  	$display("wrong using");
187                         end
188        1/1              $finish;

-------------------------------------------------------------------------------
Branch Coverage for Module : test
         Line No. Total Covered Percent 
Branches          10    4       40.00   
IF       78       2     2       100.00  
IF       83       2     1       50.00   
IF       131      6     1       16.67   


78             if (dut_running)
               -1-  
79                 timer <= timer + 1;
                   ==>
80             else
81                 timer <= 0;
                   ==>

Branches:

-1- Status  
1   Covered 
0   Covered 


83             if (timer == TIMEOUT + arg1 + arg0)
               -1-  
84             begin
85                 $display("Timeout! DUT has been running too long.");
                   ==>
86                 $finish;
87             end
               MISSING_ELSE
               ==>

Branches:

-1- Status      
1   Not Covered 
0   Covered     


131            if ($value$plusargs("arg0=%d", arg0))
               -1-  
132            begin
133                if ($value$plusargs("arg1=%d", arg1))
                   -2-  
134                begin
135                    test_input();
                       ==>
136                end
137                else
138                begin
139                    $display("Arg1 missed!");
                       ==>
140                end
141            end
142            else if ($value$plusargs("file=%s", filename))
                    -3-  
143            begin
144                file = $fopen(filename, "r");
                   ==>
145                while ($fgets(line, file))
146                begin
147                    $sscanf(line, "%d %d", arg0, arg1);
148                    test_input();
149                end
150            end
151            else if ($value$plusargs("random_mode=%d", rand_num))
                    -4-  
152            begin
153                if ( $test$plusargs("constraint"))
                   -5-  
154        	begin
155        	    RandState r_state = new;
156        	    RandTime  r_time  = new;
157        	    for ( int i = 0; i < rand_num; )
           	    ==>
158        	    begin
159        		reg ok;
160        		ok = r_state.randomize();
161        		if ( ok)
162        		begin
163        		    arg0 = r_state.result();
164        		end
165        		ok &= r_time.randomize();
166        		if ( ok)
167        		begin
168        		    arg1 = r_time.result();
169        		    i ++;
170        		    test_input();
171        		end
172        	    end
173        	end
174        	else
175        	begin
176        	    for (int i = 0; i < rand_num; i++)
           	    ==>
177                    begin
178                        arg0 = $urandom();
179                        arg1 = $urandom();
180                        test_input();
181                    end
182        	end
183            end
184            else
185            begin
186        	$display("wrong using");
           	==>

Branches:

-1- -2- -3- -4- -5- Status      
1   1   -   -   -   Not Covered 
1   0   -   -   -   Not Covered 
0   -   1   -   -   Not Covered 
0   -   0   1   1   Covered     
0   -   0   1   0   Not Covered 
0   -   0   0   -   Not Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : test
===============================================================================

Instance :

SCORE  LINE   COND   BRANCH 
 54.82  69.64 --      40.00 


Instance's subtree :

SCORE  LINE   COND   BRANCH 
 62.76  71.67 --      53.85 


Module : 

SCORE  LINE   COND   BRANCH NAME 
 54.82  69.64 --      40.00 test 


Parent : 

none
----------------


Subtrees :

SCORE  LINE   COND   BRANCH NAME    
100.00 100.00 --     100.00 counter 



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : Gray_counter
===============================================================================
SCORE  LINE   COND   BRANCH 
100.00 100.00 --     100.00 

Source File(s) : 

/export/data/verif/bochkareva_s/dpi/dpi/build/../src/grey.v

Module self-instances :

SCORE  LINE   COND   BRANCH NAME         
100.00 100.00 --     100.00 test.counter 



-------------------------------------------------------------------------------
Line Coverage for Module : Gray_counter

             Line No.   Total   Covered  Percent
TOTAL                        4        4   100.00
ALWAYS             13        4        4   100.00

12                      always @(posedge clk) begin
13         2/2            if    (rst) bin_counter <= {SIZE{1'b0}};
14         2/2            else if (inc) bin_counter <= bin_counter + 1'b1;
                        MISSING_ELSE

-------------------------------------------------------------------------------
Branch Coverage for Module : Gray_counter
         Line No. Total Covered Percent 
Branches          3     3       100.00  
IF       13       3     3       100.00  


13           if    (rst) bin_counter <= {SIZE{1'b0}};
             -1-  
             ==>
14           else if (inc) bin_counter <= bin_counter + 1'b1;
                  -2-  
             ==>
             MISSING_ELSE
             ==>

Branches:

-1- -2- Status  
1   -   Covered 
0   1   Covered 
0   0   Covered 


-------------------------------------------------------------------------------
===============================================================================
Module Instance : test.counter
===============================================================================

Instance :

SCORE  LINE   COND   BRANCH 
100.00 100.00 --     100.00 


Instance's subtree :

SCORE  LINE   COND   BRANCH 
100.00 100.00 --     100.00 


Module : 

SCORE  LINE   COND   BRANCH NAME         
100.00 100.00 --     100.00 Gray_counter 


Parent : 

SCORE  LINE   COND   BRANCH NAME 
 54.82  69.64 --      40.00 test 


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
